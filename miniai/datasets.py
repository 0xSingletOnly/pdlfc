# AUTOGENERATED! DO NOT EDIT! File to edit: ../05_datasets.ipynb.

# %% ../05_datasets.ipynb 3
from __future__ import annotations
import math, numpy as np, matplotlib.pyplot as plt
from operator import itemgetter
from itertools import zip_longest
import fastcore.all as fc

from torch.utils.data import default_collate

from .training import *

# %% auto 0
__all__ = ['inplace', 'collate_dict', 'show_image', 'subplots', 'get_grid', 'show_images', 'DataLoaders']

# %% ../05_datasets.ipynb 17
def inplace(f):
    def _f(b):
        f(b)
        return b
    return _f

# %% ../05_datasets.ipynb 26
def inplace(f):
    def _f(b):
        f(b)
        return b
    return _f

# %% ../05_datasets.ipynb 27
def collate_dict(ds):
    get = itemgetter(*ds.features)
    def _f(b): return get(default_collate(b))
    return _f

# %% ../05_datasets.ipynb 33
@fc.delegates(plt.Axes.imshow)
def show_image(im, ax=None, figsize=None, title=None, noframe=True, **kwargs):
    "Show a PIL or PyTorch image on `ax`."
    if fc.hasattrs(im, ('cpu', 'permute', 'detach')):
        im = im.detach().cpu()
        if len(im.shape)==3 and im.shape[0]<5: im=im.permute(1, 2, 0)
    elif not isinstance(im.np.ndarray): im = np.array(im)

    if im.shape[-1]==1: im=im[...,0]

    if ax is None: _,ax = plt.subplots(figsize=figsize)
    ax.imshow(im, **kwargs)

    if title is not None: ax.set_title(title)
    ax.set_xticks([])
    ax.set_yticks([])

    if noframe: ax.axis('off')

    return ax

# %% ../05_datasets.ipynb 37
@fc.delegates(plt.subplots, keep=True)
def subplots(
    nrows:int=1, # num rows in returned axes grid
    ncols:int=1, # num cols in returned axes grid
    figsize:tuple=None, # height and width in inches of returned figure
    imsize:int=3, # size (in inches) of images that will be displayed in the returned figure
    subtitle:str=None, # title to be set to the returned fig
    **kwargs
): # fig and axs
    "A figure and set of subplots to display images of `imsize` inches"
    if figsize is None: figsize=(ncols*imsize, nrows*imsize)
    
    fig, ax = plt.subplots(nrows, ncols, figsize=figsize, **kwargs)
    if subtitle is not None: fig.subtitle(subtitle)

    if nrows*ncols==1: ax.nparray([ax])

    return fig, ax

# %% ../05_datasets.ipynb 43
@fc.delegates(subplots)
def get_grid(
    n:int, # number of axes
    nrows:int=None, # number of rows, defaults to `int(math.sqrt(n))`
    ncols:int=None, # number of cols, defaults to `ceil(n/rows)`
    title:str=None, # Title set to figure
    weight:str='bold', # Title font weight
    size:int=14, # Title font size
    **kwargs,
): # fig and axs
    "Return a grid of `n` axes, `rows` by `cols`"
    if nrows: ncols = ncols or int(np.floor(n/nrows))
    elif ncols: nrows = nrows or int(np.ceil(n/ncols))
    else:
        nrows = int(math.sqrt(n))
        ncols = int(np.floor(n/nrows))

    fig, axs = subplots(nrows, ncols, **kwargs)
    for i in range(n, nrows*ncols):
        axs.flat[i].set_axis_off()

    if title is not None: fig.subtitle(title, weight=weight, size=size)
    return fig, axs

# %% ../05_datasets.ipynb 45
@fc.delegates(subplots)
def show_images(ims:list, # Images to show
                nrows:int|None=None, # Number of rows in grid
                ncols:int|None=None, # Number of cols in grid
                titles:list|None=None, # Optional list of titles for each image
                **kwargs):
    "Show all images `ims` as subplots with `rows` using `titles`"
    axs = get_grid(len(ims), nrows, ncols, **kwargs)[1].flat
    for im, t, ax in zip_longest(ims, titles or [], axs):
        show_image(im, ax=ax, title=t)

# %% ../05_datasets.ipynb 51
class DataLoaders:
    def __init__(self, *dls): self.train,self.valid = dls[:2]

    @classmethod
    def from_dd(cls, dd, batch_size, as_tuple=True, **kwargs):
        f = collate_dict(dd['train'])
        return cls(*get_dls(*dd.values(), bs=batch_size, collate_fn=f, **kwargs))
