# AUTOGENERATED! DO NOT EDIT! File to edit: ../13_resnet.ipynb.

# %% auto 0
__all__ = ['act_gr', 'ResBlock']

# %% ../13_resnet.ipynb 2
import pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
import fastcore.all as fc
from collections.abc import Mapping
from pathlib import Path
from operator import attrgetter,itemgetter
from functools import partial
from copy import copy
from contextlib import contextmanager

import torchvision.transforms.functional as TF,torch.nn.functional as F
from torch import tensor,nn,optim
from torch.utils.data import DataLoader,default_collate
from torch.nn import init
from torch.optim import lr_scheduler
from torcheval.metrics import MulticlassAccuracy
from datasets import load_dataset,load_dataset_builder

from .datasets import *
from .conv import *
from .learner import *
from .activations import *
from .init import *
from .sgd import *

# %% ../13_resnet.ipynb 5
act_gr = partial(GeneralRelu, leak=0.1, sub=0.4)

# %% ../13_resnet.ipynb 13
def _conv_block(ni, nf, stride, act=act_gr, norm=None, ks=3):
    # first layer to have stride = 1 to maintain input size
    # second layer to have act as None as we will be writing that in the ResBlock code
    return nn.Sequential(conv(ni, nf, stride=1, act=act, norm=norm, ks=ks),
                         conv(nf, nf, stride=stride, act=None, norm=norm, ks=ks))

class ResBlock(nn.Module):
    def __init__(self, ni, nf, stride=1, ks=3, act=act_gr, norm=None):
        super().__init__()
        self.convs = _conv_block(ni, nf, stride=stride, act=act_gr, ks=ks, norm=norm)
        # stride = 1 -> kernel just 'copies' each input grid, model will learn best value
        self.idconv = fc.noop if ni == nf else conv(ni, nf, ks=1, stride=1, act=None)
        self.pool = fc.noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)
        self.act = act()

    def forward(self, x):
        return self.act(self.convs(x) + self.idconv(self.pool(x)))
